/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(constants.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(732665e6e50d836ab05b8300ab0cc7f6)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/sandia_utils/constants.h>
// pydoc.h is automatically generated in the build directory
#include <constants_pydoc.h>

void bind_constants(py::module& m)
{


    py::enum_<::gr::sandia_utils::STUB_MODE>(m, "STUB_MODE")
        .value("DROP_STUB", ::gr::sandia_utils::DROP_STUB) // 0
        .value("PAD_RIGHT", ::gr::sandia_utils::PAD_RIGHT) // 1
        .value("PAD_LEFT", ::gr::sandia_utils::PAD_LEFT)   // 2
        .export_values();

    py::implicitly_convertible<int, ::gr::sandia_utils::STUB_MODE>();
    py::enum_<::gr::sandia_utils::GATE_STATE>(m, "GATE_STATE")
        .value("GATE_WAIT", ::gr::sandia_utils::GATE_WAIT)       // 0
        .value("GATE_DISCARD", ::gr::sandia_utils::GATE_DISCARD) // 1
        .value("GATE_PUBLISH", ::gr::sandia_utils::GATE_PUBLISH) // 2
        .export_values();

    py::implicitly_convertible<int, ::gr::sandia_utils::GATE_STATE>();


    m.def("PMTCONSTSTR__time",
          &::gr::sandia_utils::PMTCONSTSTR__time,
          D(PMTCONSTSTR__time));


    m.def("PMTCONSTSTR__rx_time",
          &::gr::sandia_utils::PMTCONSTSTR__rx_time,
          D(PMTCONSTSTR__rx_time));


    m.def("PMTCONSTSTR__tx_time",
          &::gr::sandia_utils::PMTCONSTSTR__tx_time,
          D(PMTCONSTSTR__tx_time));


    m.def("PMTCONSTSTR__direction",
          &::gr::sandia_utils::PMTCONSTSTR__direction,
          D(PMTCONSTSTR__direction));


    m.def("PMTCONSTSTR__RX", &::gr::sandia_utils::PMTCONSTSTR__RX, D(PMTCONSTSTR__RX));


    m.def("PMTCONSTSTR__TX", &::gr::sandia_utils::PMTCONSTSTR__TX, D(PMTCONSTSTR__TX));


    m.def("PMTCONSTSTR__lo_freq",
          &::gr::sandia_utils::PMTCONSTSTR__lo_freq,
          D(PMTCONSTSTR__lo_freq));


    m.def("PMTCONSTSTR__rate",
          &::gr::sandia_utils::PMTCONSTSTR__rate,
          D(PMTCONSTSTR__rate));


    m.def("PMTCONSTSTR__bandwidth",
          &::gr::sandia_utils::PMTCONSTSTR__bandwidth,
          D(PMTCONSTSTR__bandwidth));


    m.def("PMTCONSTSTR__rx_rate",
          &::gr::sandia_utils::PMTCONSTSTR__rx_rate,
          D(PMTCONSTSTR__rx_rate));


    m.def("PMTCONSTSTR__rx_freq",
          &::gr::sandia_utils::PMTCONSTSTR__rx_freq,
          D(PMTCONSTSTR__rx_freq));


    m.def("PMTCONSTSTR__sob", &::gr::sandia_utils::PMTCONSTSTR__sob, D(PMTCONSTSTR__sob));


    m.def("PMTCONSTSTR__eob", &::gr::sandia_utils::PMTCONSTSTR__eob, D(PMTCONSTSTR__eob));


    m.def("PMTCONSTSTR__pdu", &::gr::sandia_utils::PMTCONSTSTR__pdu, D(PMTCONSTSTR__pdu));


    m.def("PMTCONSTSTR__fname",
          &::gr::sandia_utils::PMTCONSTSTR__fname,
          D(PMTCONSTSTR__fname));


    m.def("PMTCONSTSTR__in", &::gr::sandia_utils::PMTCONSTSTR__in, D(PMTCONSTSTR__in));


    m.def("PMTCONSTSTR__out", &::gr::sandia_utils::PMTCONSTSTR__out, D(PMTCONSTSTR__out));


    m.def("PMTCONSTSTR__tune",
          &::gr::sandia_utils::PMTCONSTSTR__tune,
          D(PMTCONSTSTR__tune));


    m.def("PMTCONSTSTR__overflow",
          &::gr::sandia_utils::PMTCONSTSTR__overflow,
          D(PMTCONSTSTR__overflow));


    m.def("PMTCONSTSTR__BLOCK",
          &::gr::sandia_utils::PMTCONSTSTR__BLOCK,
          D(PMTCONSTSTR__BLOCK));


    m.def("PMTCONSTSTR__pdu_in",
          &::gr::sandia_utils::PMTCONSTSTR__pdu_in,
          D(PMTCONSTSTR__pdu_in));


    m.def("PMTCONSTSTR__pdu_out",
          &::gr::sandia_utils::PMTCONSTSTR__pdu_out,
          D(PMTCONSTSTR__pdu_out));


    m.def("PMTCONSTSTR__energy",
          &::gr::sandia_utils::PMTCONSTSTR__energy,
          D(PMTCONSTSTR__energy));


    m.def("PMTCONSTSTR__power",
          &::gr::sandia_utils::PMTCONSTSTR__power,
          D(PMTCONSTSTR__power));


    m.def("PMTCONSTSTR__dsp_freq",
          &::gr::sandia_utils::PMTCONSTSTR__dsp_freq,
          D(PMTCONSTSTR__dsp_freq));


    m.def("PMTCONSTSTR__burst_time",
          &::gr::sandia_utils::PMTCONSTSTR__burst_time,
          D(PMTCONSTSTR__burst_time));


    m.def("PMTCONSTSTR__tagged_bits_block",
          &::gr::sandia_utils::PMTCONSTSTR__tagged_bits_block,
          D(PMTCONSTSTR__tagged_bits_block));


    m.def("PMTCONSTSTR__samples",
          &::gr::sandia_utils::PMTCONSTSTR__samples,
          D(PMTCONSTSTR__samples));


    m.def("PMTCONSTSTR__item_size",
          &::gr::sandia_utils::PMTCONSTSTR__item_size,
          D(PMTCONSTSTR__item_size));


    m.def("PMTCONSTSTR__publish",
          &::gr::sandia_utils::PMTCONSTSTR__publish,
          D(PMTCONSTSTR__publish));


    m.def("PMTCONSTSTR__tune_request",
          &::gr::sandia_utils::PMTCONSTSTR__tune_request,
          D(PMTCONSTSTR__tune_request));


    m.def("PMTCONSTSTR__timeout",
          &::gr::sandia_utils::PMTCONSTSTR__timeout,
          D(PMTCONSTSTR__timeout));
}
