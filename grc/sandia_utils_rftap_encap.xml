<?xml version="1.0"?>
<block>
  <name>RFtap Encapsulation</name>
  <key>rftap_rftap_encap</key>
  <category>[Sandia]/Sandia Utilities</category>
  <import>import sandia_utils</import>
  <make>sandia_utils.rftap_encap($encapsulation_from, $custom_dlt, $custom_dissector_name)</make>

  <param>
    <name>Type</name>
    <key>encapsulation_from</key>
    <value>0</value>
    <type>enum</type>
    <option>
        <name>From PDU "dlt" key</name>
        <key>0</key>
    </option>
    <option>
        <name>From PDU "dissector" key</name>
        <key>1</key>
    </option>
    <option>
        <name>Custom DLT</name>
        <key>2</key>
    </option>
    <option>
        <name>Custom dissector</name>
        <key>3</key>
    </option>
  </param>

  <param>
    <name>Data Link Type</name>
    <key>custom_dlt</key>
    <value>-1</value>
    <type>int</type>
    <hide>#if $encapsulation_from() == '2' then 'none' else 'part'#</hide>
    <!-- TODO: enum from http://www.tcpdump.org/linktypes.html -->
  </param>

  <param>
    <name>Dissector</name>
    <key>custom_dissector_name</key>
    <value></value>
    <type>string</type>
    <hide>#if $encapsulation_from() == '3' then 'none' else 'part'#</hide>
  </param>

  <sink>
    <name>in</name>
    <type>message</type>
  </sink>

  <source>
    <name>out</name>
    <type>message</type>
  </source>

  <doc>Create RFTap packet from PDU data and metadata
See: https://rftap.github.io/

Data Link Type (DLT) can be provided from input PDUs, as "dlt" key (integer).

Alternatively, dissector name can be provided from input PDUs, as "dissector" key (string).

Alternatively, DLT can be specified in this block parameters (integer).

Alternatively, dissector name can be specified in this block parameters (string).

Data Link Types (integer):
http://www.tcpdump.org/linktypes.html

Dissector (String):
Name of wireshark dissector (or name of your custom lua/c dissector)
  </doc>

</block>
