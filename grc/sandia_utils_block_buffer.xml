<?xml version="1.0"?>
<block>
  <name>Block Buffer</name>
  <key>sandia_utils_block_buffer</key>
  <category>[Sandia]/Sandia Utilities</category>
  <import>import sandia_utils</import>
  <make>sandia_utils.block_buffer($type.size, $nsamples, $samp_rate, $pass_data)</make>

  <callback>set_nsamples($nsamples)</callback>
  <callback>set_pass_data($pass_data)</callback>

  <param>
    <name>Type</name>
    <key>type</key>
    <type>enum</type>
    <option>
      <name>Complex</name>
      <key>complex</key>
      <opt>size:gr.sizeof_gr_complex</opt>
    </option>
    <option>
      <name>Float</name>
      <key>float</key>
      <opt>size:gr.sizeof_float</opt>
    </option>
    <option>
      <name>Int</name>
      <key>int</key>
      <opt>size:gr.sizeof_int</opt>
    </option>
    <option>
      <name>Short</name>
      <key>short</key>
      <opt>size:gr.sizeof_short</opt>
    </option>
    <option>
      <name>Byte</name>
      <key>byte</key>
      <opt>size:gr.sizeof_char</opt>
    </option>
  </param>
  <param>
    <name>Number of Samples</name>
    <key>nsamples</key>
    <value>10000</value>
    <type>int</type>
  </param>
  <param>
    <name>Sample Rate</name>
    <key>samp_rate</key>
    <value>samp_rate</value>
    <type>real</type>
  </param>

  <param>
    <name>Pass Data?</name>
    <key>pass_data</key>
    <value>True</value>
    <type>bool</type>
    <hide>part</hide>
    <option>
      <name>True</name>
      <key>True</key>
    </option>
    <option>
      <name>False</name>
      <key>False</key>
    </option>
  </param>

  <sink>
    <name>in</name>
    <type>$type</type>
  </sink>

  <source>
    <name>out</name>
    <type>$type</type>
  </source>

  <doc>
Guarantee blocks of continuous samples.

This block internally buffers the specified number of samples. It watches for rx_time tags, which indicate overflow, sample rate change, or frequency changes from the source.
The output is guaranteed to be free from such discontinuities.

A BLOCK tag is output with the first sample of each block. The value of the tag is the number of samples which have been skipped since the last block (not counting any skips from source overflows).

An example use case would be to place this block immediately after a source, proceeded by a throttle. Then, the source can be set to a high sample rate, while the processing is done at a lower, configurable rate.
  </doc>

</block>
